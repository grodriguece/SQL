#046Y ordered by cell then by att low to high
#MISS3 ordered by cell then by att high to low
# MISS3 INNER JOIN 046Y ON (MISS2.WCELS = 046Y.WCELS)
#Cell(i) cell with missing candidates
import sqlite3
conn = sqlite3.connect('C:\XML\SQL\20200522_sqlite.db')
c = conn.cursor()
c.execute ("DROP TABLE IF EXISTS ADJS_Dep")
c.execute("""CREATE TABLE ADJS_Dep (
            RNC_Id integer,
            WBTS_Id integer,
            WCEL_Id integer,
            ADJS_Id integer
            )""")
c.execute("INSERT INTO ADJS_Dep VALUES (2011, 65130, 65131, 1)")
c.execute("INSERT INTO ADJS_Dep VALUES (2011, 65132, 65133, 2)")
#c.execute("SELECT * FROM ADJS_Dep WHERE RNC_Id= 2011")
#print(c.fetchone())
c.execute("""SELECT
              MISS3.WCELS, MISS3.WCELT,S046_DistTY.WCELS,S046_DistTY.WCELS
              FROM MISS3 INNER JOIN S046_DistTY ON () 


          """))





print(c.fetchall())


conn.commit()
conn.close()



c.execute("SELECT rowid, * FROM MISS3")
miss1=c.fetchall()


cellsm = get_miss(miss1)            #miss cells list
i = 0                               #miss row counter initialize
n = len(cellsm)                         #misscell amnt
while i < n                        # while <> EOlist
    in = 1                         # break control for att comparison
    msrc = cellsm[i][3]             #wcel src
    j = 0                           #SY row counter
    celldep = get_046y(cellsm[i][3])     #SY cell list belonging to mcel
    m = len(celldep)                        #SYcell amnt
    k = cellsm[i][27]                 #missed qty
    sycel = celldep[j][3]]
    if ((n+m) < 30):
        o = 0
        while (o < k):              #rows to add
            crea = ADJSCrea(cellsm[i][5], cellsm[i][6], cellsm[i][3], cellsm[i][7], cellsm[i][4]) 
            insert_crea(crea)         #raw inset into ADJS_Add db with ADJSCrea class
            i += 1                    #general miss row id
            o += 1                    #control for set of miss cells added
    else:
        while ((cellsm[i][3] == celldep[j][3]) and in and i < n and j < m):
            if (cellsm[i][17] > celldep[j][16]) and deps < 11):
                crea = ADJSCrea(cellsm[i][5], cellsm[i][6], cellsm[i][3], cellsm[i][7], cellsm[i][4]) 
                insert_crea(crea)         #raw insert into ADJS_Add db with ADJSCrea class
                depu = ADJSDep(celldep[j][5],celldep[j][7],celldep[j][3],celldep[j][9],celldep[j][4],celldep[j][6],celldep[j][8])
                insert_depu(depu))        #raw insert into ADJS_Dep db with ADJSDep class
                i += 1                    #next miss
                j += 1                    #next SY
                deps += 1                 #miss add qty control
            else:
                in = 0                    #break ocndition
        if (i == 0 and i < n):                                 #increase row miss pointer until next diff cell for first misscell if cond is not passed
            while (cellsm[i][3] == celldep[j][3])    
                i += 1
        else:                                                    #increase row miss pointer until next  diff cell
            while ((cellsm[i][3] == cellsm[i-1][3]) and  i < n)    
                i += 1


############################ initial code

c.execute("INSERT INTO ADJS_Dep VALUES ('med.bello_x','med.bello_y',2011, 65130, 65131, 1)")
c.execute("INSERT INTO ADJS_Dep VALUES ('med.bello_z','med.bello-1_y',2011, 65132, 65133, 2)")
c.execute("SELECT rowid, * FROM ADJS_Dep WHERE rowid =1 AND RNC_Id= 2011")
print(c.fetchone())
# print(c.fetchall())
AD1 = ADJSCrea (2000,101,'MED.TEST','celldn','MED.TEST2')
print(AD1.sourcename)
miss1 = 'ANT.Acuarela-2_J'
cellsm = get_miss(miss1)            #miss cells list
# print(cellsm)
for item in cellsm:
    print(item)
print(cellsm)
i = 0                               #miss row counter
j = 0                               #SY row counter
print(len(cellsm[i]))
print(cellsm[i][3])                 #wcel src
print(cellsm[i][17])                 #missed attps
print(cellsm[i][27])                 #missed qty
celldep = get_046y(cellsm[i][3])     #SY cell list belonging to mcel
for item in celldep:
    print(item)
n = len(cellsm)                         #misscell amnt
print(n)
m = len(celldep)                        #SYcell amnt
print(m)
print(cellsm[0][0])
print(celldep[0][0])
#
# crea = ADJSCrea(2011, 6500, 'med.belen_X', 'plmn/rnc-2011/wbts-112/wcel_id-112', 'med.belen_y')
# print(crea.mcc)
# c.execute("SELECT rowid, * FROM MISS3 WHERE (WCELS = 'ANT.Acuarela-2_J')")
# items=c.fetchall()
# for item in items:
#     print(item)
conn.commit()
conn.close()


















RId=1
while <> EOF
      Out = 0  #neighbor verification out flag
      nameact=MISS3(riD).WCELS              #Ccelda actual
      RIdY = select * from 046Y where wcels=MISS3.wcels #TRAE REGISTROS DE 046y QUE COINCIDEN CON MIss3.wcels
      If (Cell(i).QtyToAdd + Cell(i).ADJSQty) > 29 #ADJS lit limit 31
            then
                  while (Out=0)
                    for (j=1 to (Cell(i).QtyToAdd + Cell(i).ADJSQty - 29), j++)     #for exec only when out=0
                        if Cell(i).miss(j) > cell(i).046(j)
                              then
                                    add (Cell(i).miss(j))
                                    del (cell(i).046(j))
                              else
                                    Out = 1
                              end if
                
            else
                  for (j=1 to Cell(i).QtyToAdd, j++)
                        add (Cell(i).miss(j) A ADJS_CREA) 
                        
                        
                        
                        
import sqlite3
from employee import Employee

conn = sqlite3.connect(':memory:')

c = conn.cursor()

c.execute("""CREATE TABLE ADJS_Dep (             #""" to use multiple lines """
            WCELS   text,
            RNC_Id intger,
            WBTS_Id integer,
            WCEL_Id integer,
            ADJS_Id integer
            )""")
c.execute("""CREATE TABLE ADJS_Crea (             
            WCELS   text,
            RNC_Id intger,
            WBTS_Id integer,
            WCEL_Id integer,
            ADJS_Id integer
            )""")



def insert_crea(crea):
    with conn:
        c.execute("INSERT INTO ADJS_Crea VALUES (:WCELS, :RNC_Id, :WBTS_Id, :WCEL_Id, :ADJS_Id)", {'WCELS': crea.WCELS, 'RNC_Id': crea.RNC_Id, 'WBTS_Id': crea.WBTS_Id, 'WCEL_Id': crea.WCEL_Id, 'ADJS_Id': crea.ADJS_Id})

def insert_dep(dep):
    with conn:
        c.execute("INSERT INTO ADJS_Dep VALUES (:WCELS, :RNC_Id, :WBTS_Id, :WCEL_Id, :ADJS_Id)", {'WCELS': dep.WCELS, 'RNC_Id': dep.RNC_Id, 'WBTS_Id': dep.WBTS_Id, 'WCEL_Id': dep.WCEL_Id, 'ADJS_Id': dep.ADJS_Id})


def get_emps_by_name(lastname):
    c.execute("SELECT * FROM employees WHERE last=:last", {'last': lastname})
    return c.fetchall()


def update_pay(emp, pay):
    with conn:
        c.execute("""UPDATE employees SET pay = :pay
                    WHERE first = :first AND last = :last""",
                  {'first': emp.first, 'last': emp.last, 'pay': pay})


def remove_emp(emp):
    with conn:
        c.execute("DELETE from employees WHERE first = :first AND last = :last",
                  {'first': emp.first, 'last': emp.last})

emp_1 = Employee('John', 'Doe', 80000)
emp_2 = Employee('Jane', 'Doe', 90000)

insert_emp(emp_1)
insert_emp(emp_2)

emps = get_emps_by_name('Doe')
print(emps)

update_pay(emp_2, 95000)
remove_emp(emp_1)

emps = get_emps_by_name('Doe')
print(emps)

conn.close()                             



def insert_emp(emp):
    pass


def get_emps_by_name(lastname):
    pass


def update_pay(emp, pay):
    pass


def remove_emp(emp):
    pass




def update_pay(emp, pay):
    with conn:
        c.execute("""UPDATE employees SET pay = :pay
                    WHERE first = :first AND last = :last""",
                  {'first': emp.first, 'last': emp.last, 'pay': pay})


def remove_emp(emp):
    with conn:
        c.execute("DELETE from employees WHERE first = :first AND last = :last",
                  {'first': emp.first, 'last': emp.last})
                  
                  
c.execute("SELECT rowid, * FROM MISS3")

c.execute("""UPDATE ADJS_Crea SET RNC_Id = 2000
            WHERE rowid = 1
            """")
####################################################
            
            
    class ADJS_Crea:
    numadjs = 0
    SourceMCC = 732
    SourceMNC = 101
    def __init__(self,SourceRncId,SourceCI,SourceName,TargetCellDN,TargetName):
        self.SourceRncId = SourceRncId
        self.SourceCI = SourceCI
        self.SourceName = SourceName
        self.TargetCellDN = TargetCellDN
        self.TargetName = TargetName
        ADJS_Crea.numadjs += 1

    def keycell (self):
        return '{}{}'.format(self.SourceRncId,self.SourceCI)

class ADJS_Dep (ADJS_Crea)
    def __init__(self, wbtsids, adjsid):
        self.wbtsids = wbtsids
        self.adjsid = adjsid


ADJS1 = ADJS_Crea (2000,101,'MED.TEST','celldn','MED.TEST2')
print(ADJS1.keycell())
print(ADJS1.SourceMCC)
print(ADJS1.SourceCI)
print(ADJS_Crea.numadjs)
                           
################################################
https://www.youtube.com/watch?v=RSl87lqOXDE                           
                           
class Employee:

    raise_amt = 1.04

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amt)


class Developer(Employee):
    raise_amt = 1.10

    def __init__(self, first, last, pay, prog_lang):
        super().__init__(first, last, pay)
        self.prog_lang = prog_lang


class Manager(Employee):

    def __init__(self, first, last, pay, employees=None):
        super().__init__(first, last, pay)
        if employees is None:
            self.employees = []
        else:
            self.employees = employees

    def add_emp(self, emp):
        if emp not in self.employees:
            self.employees.append(emp)

    def remove_emp(self, emp):
        if emp in self.employees:
            self.employees.remove(emp)

    def print_emps(self):
        for emp in self.employees:
            print('-->', emp.fullname())


dev_1 = Developer('Corey', 'Schafer', 50000, 'Python')
dev_2 = Developer('Test', 'Employee', 60000, 'Java')

mgr_1 = Manager('Sue', 'Smith', 90000, [dev_1])

print(mgr_1.email)

mgr_1.add_emp(dev_2)
mgr_1.remove_emp(dev_2)

mgr_1.print_emps()                                    