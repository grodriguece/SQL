--funciones matemeticas avanzadas
SELECT load_extension('./libsqlitefunctions.so')
-- Por Sqlitstudio se importa baseline csv
--
--
--
--
-- Import reports from RC7 and RC8 taking ";" delimiter in SQLITESTUDIO import table process
-- RSRAN046, Detected pairing, Drop after missing cleaning
DELETE FROM RSRAN046;
DELETE FROM DET_SET;
DELETE FROM DRP_AFT_MISSING;
--
-- Import RSRAN046, DetectedSet, Drop after missing reports--
--
--Tabla BCCH-BSIC audit. incluye coBCCHBSIC y sus distancias
--
DROP TABLE IF EXISTS BSIC_DistT;
CREATE TABLE BSIC_DistT AS
SELECT
BTS.Name || TRX.initialFrequency || BTS.bsIdentityCodeNCC || BTS.bsIdentityCodeBCC AS Key, BTS.Name AS BTSSRC, BTS_1.Name AS BTSTGT, TRX.initialFrequency, 1*(BTS.bsIdentityCodeNCC || BTS.bsIdentityCodeBCC) AS BSIC, baseline.Market || "-" || baseline."Localidad (CRC)" AS ClusterS, baseline_1.Market || "-" || baseline_1."Localidad (CRC)" AS ClusterT, CASE WHEN (BCF.Name = BCF_1.Name) THEN 1 ELSE 0 END AS SameSite, CASE WHEN (1*SUBSTR(BTS.name,-1,1) > 0) THEN 850 ELSE 1900 END AS BandS, CASE WHEN (1*SUBSTR(BTS_1.name,-1,1) > 0) THEN 850 ELSE 1900 END AS BandT, BTS.BSC_Id, BTS.BCF_Id, BTS.BTS_Id, BTS_1.BSC_Id AS BSCIdT, BTS_1.BCF_Id AS BCFIdT, BTS_1.BTS_Id AS BTS_IdT, BCF.name AS BCFSrc, BCF_1.name AS BCFTgt,
ROUND (12756273.2 * ASIN(MIN (1 , SQRT(POWER( SIN(RADIANS(Baseline.Latitud - Baseline_1.Latitud)/2) , 2) + COS(RADIANS(Baseline.Latitud)) * COS(RADIANS(Baseline_1.Latitud)) * POWER ( SIN(RADIANS(Baseline.Longitud - Baseline_1.Longitud)/2) , 2)))) , 0) AS Distance
FROM ((((((((TRX INNER JOIN TRX AS TRX_1 ON TRX.channel0Type = 4 AND TRX_1.channel0Type=4 AND (TRX.InitialFrequency = TRX_1.InitialFrequency)) LEFT JOIN BTS ON (TRX.BTS_Id = BTS.BTS_Id) AND (TRX.BCF_Id = BTS.BCF_Id) AND (TRX.BSC_Id = BTS.BSC_Id)) LEFT JOIN BTS AS BTS_1 ON (1*(BTS.bsIdentityCodeNCC || BTS.bsIdentityCodeBCC) = 1*(BTS_1.bsIdentityCodeNCC || BTS_1.bsIdentityCodeBCC)) AND (TRX_1.BTS_Id = BTS_1.BTS_Id) AND (TRX_1.BCF_Id = BTS_1.BCF_Id) AND (TRX_1.BSC_Id = BTS_1.BSC_Id)) LEFT JOIN BCF ON (BTS.BCF_Id = BCF.BCF_Id) AND (BTS.BSC_Id = BCF.BSC_Id)) LEFT JOIN BCF AS BCF_1 ON (BTS_1.BCF_Id = BCF_1.BCF_Id) AND (BTS_1.BSC_Id = BCF_1.BSC_Id)) LEFT JOIN BSC ON BCF.BSC_Id = BSC.BSC_Id) LEFT JOIN BSC AS BSC_1 ON BCF_1.BSC_Id = BSC_1.BSC_Id) LEFT JOIN baseLine ON BCF.name = baseLine.Sitio) LEFT JOIN baseLine AS baseLine_1 ON BCF_1.name = baseLine_1.Sitio
WHERE ((CASE WHEN (BTS.Name = BTS_1.Name) THEN 1 ELSE 0 END) = 0) AND (CASE WHEN (1*SUBSTR(BTS.name,-1,1) > 0) THEN 850 ELSE 1900 END = CASE WHEN (1*SUBSTR(BTS_1.name,-1,1) > 0) THEN 850 ELSE 1900 END) AND (TRX.channel0Type)=4 AND (BSC.name LIKE '%MED%' OR BSC.name LIKE '%MGA%' OR BSC.name LIKE '%PER%');
--
--toma menor distancia de la llave
--
DROP TABLE IF EXISTS BSIC_DistMin;
CREATE TABLE BSIC_DistMin AS
SELECT
BSIC_DistT.Key, Min(BSIC_DistT.Distance) AS MinOfDistancia
FROM BSIC_DistT
GROUP BY BSIC_DistT.Key;
--
--Query result
--
DROP TABLE IF EXISTS BSIC_DistF;
CREATE TABLE BSIC_DistF AS
SELECT
BSIC_DistT.Key,BSIC_DistT.BTSSRC,BSIC_DistT.BTSTGT,BSIC_DistT.initialFrequency,BSIC_DistT.BSIC,BSIC_DistT.ClusterS,BSIC_DistT.ClusterT,BSIC_DistT.SameSite,BSIC_DistT.BSC_id,BSIC_DistT.BCF_id,BSIC_DistT.BTS_id,BSIC_DistT.BSCIdT,BSIC_DistT.BCFIdT,BSIC_DistT.BTS_IdT,BSIC_DistT.BandS,BSIC_DistT.BandT,BSIC_DistT.BCFSrc,BSIC_DistT.BCFTgt,BSIC_DistT.Distance
FROM BSIC_DistT INNER JOIN BSIC_DistMin ON (BSIC_DistT.Distance = BSIC_DistMin.MinOfDistancia) AND (BSIC_DistT.Key = BSIC_DistMin.Key)
ORDER BY BSIC_DistT.Distance;
--
--
--
--
--UMTS
--
--
--
--WCEL for NorOcc and neighbors
--
DROP TABLE IF EXISTS WCEL_V;
CREATE TABLE WCEL_V AS
SELECT *
FROM WCEL
WHERE (WCEL.RNC_id LIKE '20%') OR (WCEL.RNC_id LIKE '27%') OR (SUBSTR(WCEL.name,1,3) = "BOL") OR (SUBSTR(WCEL.name,1,3) = "COR") OR (SUBSTR(WCEL.name,1,3) = "TOL") OR (SUBSTR(WCEL.name,1,3) = "SND") OR (SUBSTR(WCEL.name,1,3) = "BOY") OR (SUBSTR(WCEL.name,1,3) = "VAL") OR (SUBSTR(WCEL.name,1,3) = "CUN");
--
--
-- top detect list
--
DROP TABLE IF EXISTS DET_SET1;
CREATE TABLE DET_SET1 AS
SELECT
DET_SET.PERIOD_START_TIME,DET_SET.PLMNname,DET_SET.RNCname, DET_SET.hos_id, DET_SET.scid_id, DET_SET.mcc_id, DET_SET.mnc_id, DET_SET.scr_id, DET_SET.CPICH_ECNO_DET_SUM_M1028C0, DET_SET.CPICH_ECNO_DET_DENOM_M1028C1, DET_SET.CPICH_RSCP_DET_SUM_M1028C2, DET_SET.CPICH_RSCP_DET_DENOM_M1028C3 
FROM DET_SET
WHERE 1*DET_SET.CPICH_ECNO_DET_DENOM_M1028C1 > 5000;
--
--combination selection < 50KMS
--
DROP TABLE IF EXISTS DET_DistT;
CREATE TABLE DET_DistT AS
SELECT
DET_SET1.PERIOD_START_TIME, 1*(DET_SET1.hos_id || DET_SET1.scid_id || DET_SET1.scr_id) AS KEY, WCEL_V.Name AS WCELS, WCEL_V_1.Name AS WCELT, DET_SET1.hos_id AS RNCS, DET_SET1.scid_id AS WCEL_IdS, "PLMN-PLMN/RNC-" || WCEL_V_1.RNC_Id || "/WBTS-" || WCEL_V_1.WBts_Id || "/WCEL-" || WCEL_V_1.WCEL_Id AS TargetCellDN, WCEL_V.WBTS_Id AS WBTSIdS, WCEL_V_1.RNC_Id AS RNCT, WCEL_V_1.WBTS_Id AS WBTSIdT, WCEL_V_1.WCEL_Id AS WCEL_IdT, WBTS.Name AS WBTSS, WBTS_1.Name AS WBTST, DET_SET1.RNCname AS RNCnameDET, DET_SET1.mcc_id,DET_SET1.mnc_id, DET_SET1.scr_id AS PSCT, DET_SET1.CPICH_ECNO_DET_SUM_M1028C0,DET_SET1.CPICH_ECNO_DET_DENOM_M1028C1,DET_SET1.CPICH_RSCP_DET_SUM_M1028C2,DET_SET1.CPICH_RSCP_DET_DENOM_M1028C3, Baseline.Market || '-' || Baseline."Localidad (CRC)" AS ClusterS, Baseline_1.Market || '-' || Baseline_1."Localidad (CRC)" AS ClusterT, Baseline.region AS RegionS, Baseline_1.Region AS RegionT, 1*(ROUND (
      12756273.2 * ASIN(
                        MIN (1 , 
                                SQRT(
                                    POWER( SIN(RADIANS(Baseline.Latitud - Baseline_1.Latitud)/2) , 2) + 
                                    COS(RADIANS(Baseline.Latitud)) * COS(RADIANS(Baseline_1.Latitud)) * POWER ( SIN(RADIANS(Baseline.Longitud - Baseline_1.Longitud)/2) , 2)
                                      )
                            )
                        )
         , 0)) AS Distance, DRP_AFT_MISSING.CS_VOICE_DRP_AFT_MISSING_ADJM_1001C714 AS DRPs_AFT_MISS, DRP_AFT_MISSING.SHOOverheadRT AS SHOOvrHd  
FROM (((((((DET_SET1 LEFT JOIN WCEL_V ON (1*DET_SET1.hos_id = 1*WCEL_V.RNC_Id) AND (1*DET_SET1.scid_id = 1*WCEL_V.WCEL_Id)) 
LEFT JOIN WCEL_V AS WCEL_V_1 ON (1*DET_SET1.scr_id = 1*WCEL_V_1.PriScrCode) AND (WCEL_V.UARFCN = WCEL_V_1.UARFCN )) 
LEFT JOIN WBTS ON (1*DET_SET1.hos_id = 1*WBTS.RNC_Id) AND (1*WCEL_V.WBTS_Id = 1*WBTS.WBTS_Id)) 
LEFT JOIN WBTS AS WBTS_1 ON (1*WCEL_V_1.RNC_Id = 1*WBTS_1.RNC_Id) AND (1*WCEL_V_1.WBTS_Id = 1*WBTS_1.WBTS_Id)) LEFT JOIN baseline ON (WBTS.Name = baseline.Sitio)) 
LEFT JOIN baseline AS baseline_1 ON (WBTS_1.Name = baseline_1.Sitio))
LEFT JOIN RNC ON (1*DET_SET1.hos_id = RNC.RNC_Id))
LEFT JOIN DRP_AFT_MISSING ON (RNC.Name = DRP_AFT_MISSING.RNCname) AND (WCEL_V.WBTS_Id = DRP_AFT_MISSING.WBTSID) AND (WCEL_V.WCEL_Id = DRP_AFT_MISSING.WCELID) 
WHERE (ROUND (
      12756273.2 * ASIN(
                        MIN (1 , 
                                SQRT(
                                    POWER( SIN(RADIANS(Baseline.Latitud - Baseline_1.Latitud)/2) , 2) + 
                                    COS(RADIANS(Baseline.Latitud)) * COS(RADIANS(Baseline_1.Latitud)) * POWER ( SIN(RADIANS(Baseline.Longitud - Baseline_1.Longitud)/2) , 2)
                                      )
                            )
                        )
         , 0) < 50000) AND (((1*DET_SET1.hos_id) LIKE '20%') OR ((1*DET_SET1.hos_id) LIKE '27%'));
--
--toma menor distancia de la llave
--
DROP TABLE IF EXISTS DET_DistMin;
CREATE TABLE DET_DistMin AS
SELECT
DET_DistT.Key, 1*(Min(DET_DistT.Distance)) AS MinOfDistancia, WCEL_Param.Cluster, WCEL_Param.Encargado, WCEL_Param.UARFCN
FROM DET_DistT LEFT JOIN WCEL_Param ON (DET_DistT.RNCS = WCEL_Param.RNC_Id) AND (DET_DistT.WBTSIdS = WCEL_Param.WBTS_Id) AND (DET_DistT.WCEL_IdS = WCEL_Param.WCEL_Id)
GROUP BY DET_DistT.Key;
--
--ADJS QTY PER CELL
--
DROP TABLE IF EXISTS ADJS_QTY;
CREATE TABLE ADJS_QTY AS
SELECT
ADJS.PLMN_id, ADJS.RNC_Id, ADJS.WBTS_Id, ADJS.WCEL_Id, 1*(COUNT (ADJS.ADJS_Id)) AS ADJS_QTY
FROM ADJS
GROUP BY ADJS.RNC_Id, ADJS.WBTS_Id, ADJS.WCEL_Id; 
--
--DETECtED Result
--
DROP TABLE IF EXISTS DET_DistF;
CREATE TABLE DET_DistF AS
SELECT
1*(DET_DistT.RNCS|| DET_DistT.WCEL_IdS) AS KEY1, DET_DistT.WCELS,DET_DistT.WCELT,DET_DistT.Distance, ADJS_QTY.ADJS_QTY, DET_DistMin.Encargado, DET_DistT.ClusterS,DET_DistT.ClusterT,DET_DistT.PSCT, DET_DistMin.UARFCN, DET_DistT.RNCS, DET_DistT.mcc_id AS MCCS, DET_DistT.mnc_id AS MNCS, DET_DistT.WCELS, DET_DistT.TargetCellDN,DET_DistT.WCELT, DET_DistT.PERIOD_START_TIME,DET_DistT.KEY,DET_DistT.WCEL_IdS,DET_DistT.WBTSIdS,DET_DistT.RNCT,DET_DistT.WBTSIdT,DET_DistT.WCEL_IdT,DET_DistT.WBTSS,DET_DistT.WBTST,DET_DistT.RNCnameDET, DET_DistT.CPICH_ECNO_DET_SUM_M1028C0,DET_DistT.CPICH_ECNO_DET_DENOM_M1028C1,DET_DistT.CPICH_RSCP_DET_SUM_M1028C2,DET_DistT.CPICH_RSCP_DET_DENOM_M1028C3,DET_DistT.RegionS,DET_DistT.RegionT, 1*(DET_DistT.RNCS|| DET_DistT.WCEL_IdS || DET_DistT.RNCT|| DET_DistT.WCEL_IdT) AS KEY2, DET_DistT.DRPs_AFT_MISS, DET_DistT.SHOOvrHd  
FROM (DET_DistT INNER JOIN DET_DistMin ON (DET_DistT.Distance = DET_DistMin.MinOfDistancia) AND (DET_DistT.Key = DET_DistMin.Key)) LEFT JOIN ADJS_QTY ON (DET_DistT.RNCS = ADJS_QTY.RNC_Id) AND (DET_DistT.WCEL_IdS = ADJS_QTY.WCEL_Id)  
ORDER BY DET_DistT.Distance;
--
--
--         
--046 PARAM AND DISTANCE
--
DROP TABLE IF EXISTS S046_DistT;
CREATE TABLE S046_DistT AS
SELECT
(RSRAN046.WCELNameS || RSRAN046.WCELNameT) AS KEY, RSRAN046.WCELNameS AS WCELS, RSRAN046.WCELNameT AS WCELT, WCEL.RNC_Id AS RNCS, RSRAN046.WCEL_IdS, "PLMN-PLMN/RNC-" || WCEL_1.RNC_Id || "/WBTS-" || WCEL_1.WBts_Id || "/WCEL-" || WCEL_1.WCEL_Id AS TargetCellDN, WCEL.WBTS_Id AS WBTSIdS, WCEL_1.RNC_Id AS RNCT, WCEL_1.WBTS_Id AS WBTSIdT, RSRAN046.WCEL_IdT, RSRAN046.WBTSNameS AS WBTSS, RSRAN046.WBTSNameT AS WBTST, RSRAN046.RNCNameS, RSRAN046.adjQTY,RSRAN046.Neighbor,RSRAN046.Att,RSRAN046.Share,RSRAN046.SRperadjacency,RSRAN046.EcNodiffbtwcellpair,RSRAN046.AvgCPICHEcNo, 1*(WCEL.RNC_Id || RSRAN046.WCEL_IdS) AS KEY1, 1*(WCEL.RNC_Id || RSRAN046.WCEL_IdS || WCEL_1.RNC_Id || RSRAN046.WCEL_IdT) AS KEY2, Baseline.Market || '-' || Baseline."Localidad (CRC)" AS ClusterS, Baseline_1.Market || '-' || Baseline_1."Localidad (CRC)" AS ClusterT, Baseline.region AS RegionS, Baseline_1.Region AS RegionT, 1*ROUND (
      12756273.2 * ASIN(
                        MIN (1 , 
                                SQRT(
                                    POWER( SIN(RADIANS(Baseline.Latitud - Baseline_1.Latitud)/2) , 2) + 
                                    COS(RADIANS(Baseline.Latitud)) * COS(RADIANS(Baseline_1.Latitud)) * POWER ( SIN(RADIANS(Baseline.Longitud - Baseline_1.Longitud)/2) , 2)
                                      )
                            )
                        )
         , 0) AS Distance, RSRAN046.CPICHRSCPSHO, DRP_AFT_MISSING.CS_VOICE_DRP_AFT_MISSING_ADJM_1001C714 AS DRPs_AFT_MISS, DRP_AFT_MISSING.SHOOverheadRT AS SHOOvrHd 
FROM ((((((RSRAN046 LEFT JOIN WCEL ON (RSRAN046.WCELNameS = WCEL.Name) AND (RSRAN046.WCEL_IdS = WCEL.WCEL_Id)) LEFT JOIN WCEL AS WCEL_1 ON (RSRAN046.WCELNameT = WCEL_1.Name) AND (RSRAN046.WCEL_IdT = WCEL_1.WCEL_Id)) LEFT JOIN WBTS ON (WCEL.RNC_Id = WBTS.RNC_Id) AND (WCEL.WBTS_Id = WBTS.WBTS_Id)) LEFT JOIN WBTS AS WBTS_1 ON (WCEL_1.RNC_Id = WBTS_1.RNC_Id) AND (WCEL_1.WBTS_Id = WBTS_1.WBTS_Id)) LEFT JOIN baseline ON (WBTS.Name = baseline.Sitio)) 
LEFT JOIN baseline AS baseline_1 ON (WBTS_1.Name = baseline_1.Sitio))
LEFT JOIN DRP_AFT_MISSING ON (RSRAN046.RNCNameS = DRP_AFT_MISSING.RNCname) AND (WCEL.WBTS_Id = DRP_AFT_MISSING.WBTSID) AND (RSRAN046.WCEL_IdS = DRP_AFT_MISSING.WCELID)  
WHERE (WCEL.RNC_Id LIKE '20%') OR (WCEL.RNC_Id LIKE '27%');
--
--
--046 NEIGHBOR NO
--DROP TABLE IF EXISTS S046_DistTN;
--CREATE TABLE S046_DistTN AS
DELETE FROM S046_DistTN;
INSERT INTO S046_DistTN
SELECT
S046_DistT.KEY1, S046_DistT.KEY2, S046_DistT.WCELS,S046_DistT.WCELT,S046_DistT.RNCS,S046_DistT.WCEL_IdS,S046_DistT.TargetCellDN,S046_DistT.WBTSIdS,S046_DistT.RNCT,S046_DistT.WBTSIdT,S046_DistT.WCEL_IdT,S046_DistT.WBTSS,S046_DistT.WBTST,S046_DistT.adjQTY,S046_DistT.Att, S046_DistT.ClusterS,S046_DistT.ClusterT,S046_DistT.RegionS,S046_DistT.RegionT,S046_DistT.Distance,S046_DistT.DRPs_AFT_MISS ,S046_DistT.SHOOvrHd
FROM S046_DistT          
WHERE (S046_DistT.Neighbor LIKE 'No%');
--
--
--046 NEIGHBOR YES with ADJS_Id create table S046_DistTY if necessary 
--DROP TABLE IF EXISTS S046_DistTY;
--CREATE TABLE S046_DistTY AS
---
DELETE FROM S046_DistTY;
INSERT INTO S046_DistTY
SELECT
S046_DistT.KEY1, S046_DistT.KEY2, S046_DistT.WCELS,S046_DistT.WCELT,S046_DistT.RNCS,S046_DistT.WBTSIdS,S046_DistT.WCEL_IdS, ADJS.ADJS_Id, S046_DistT.TargetCellDN,S046_DistT.RNCT,S046_DistT.WBTSIdT,S046_DistT.WCEL_IdT,S046_DistT.WBTSS,S046_DistT.WBTST,S046_DistT.adjQTY,S046_DistT.Att, S046_DistT.ClusterS,S046_DistT.ClusterT,S046_DistT.RegionS,S046_DistT.RegionT,S046_DistT.Distance,S046_DistT.DRPs_AFT_MISS ,S046_DistT.SHOOvrHd
FROM ADJS INNER JOIN S046_DistT ON (ADJS.RNC_Id = S046_DistT.RNCS) AND (ADJS.WBTS_Id = S046_DistT.WBTSIdS) AND (ADJS.WCEL_Id = S046_DistT.WCEL_IdS) AND (ADJS.AdjsRNCid = S046_DistT.RNCT) AND (ADJS.AdjsCI = S046_DistT.WCEL_IdT)
WHERE (S046_DistT.Neighbor LIKE 'Yes%')
ORDER BY S046_DistT.WCELS, 1*(S046_DistT.Att);
--
--
--  
--Inner Join Query. 046N and Det coincident Missing Cells. Instead of create del and insert to keep column data types
--
--DROP TABLE IF EXISTS MISS1;
--CREATE TABLE MISS1 AS
DELETE FROM MISS1;
INSERT INTO MISS1
SELECT
S046_DistTN.KEY1, S046_DistTN.KEY2, S046_DistTN.WCELS,S046_DistTN.WCELT,S046_DistTN.RNCS,S046_DistTN.WCEL_IdS,S046_DistTN.TargetCellDN,S046_DistTN.WBTSIdS,S046_DistTN.RNCT,S046_DistTN.WBTSIdT,S046_DistTN.WCEL_IdT,S046_DistTN.WBTSS,S046_DistTN.WBTST,S046_DistTN.adjQTY,S046_DistTN.Att AS ATT1, DET_DistF.CPICH_ECNO_DET_DENOM_M1028C1 AS ATT2, 1*(S046_DistTN.Att + DET_DistF.CPICH_ECNO_DET_DENOM_M1028C1) AS ATTF, S046_DistTN.ClusterS,S046_DistTN.ClusterT,S046_DistTN.RegionS,S046_DistTN.RegionT,S046_DistTN.Distance,S046_DistTN.DRPs_AFT_MISS ,S046_DistTN.SHOOvrHd
FROM S046_DistTN INNER JOIN DET_DistF ON (S046_DistTN.RNCS = DET_DistF.RNCS) AND (S046_DistTN.WBTSIdS = DET_DistF.WBTSIdS) AND (S046_DistTN.WCEL_IdS = DET_DistF.WCEL_IdS) AND (S046_DistTN.RNCT = DET_DistF.RNCT) AND (S046_DistTN.WBTSIdT = DET_DistF.WBTSIdT) AND (S046_DistTN.WCEL_IdT = DET_DistF.WCEL_IdT);        
--
--Left Join 046 Query. 046N only Missing Cells
--
--DROP TABLE IF EXISTS MISS2;
--CREATE TABLE MISS2 AS
INSERT INTO MISS1
SELECT
S046_DistTN.KEY1, S046_DistTN.KEY2, S046_DistTN.WCELS,S046_DistTN.WCELT,S046_DistTN.RNCS,S046_DistTN.WCEL_IdS,S046_DistTN.TargetCellDN,S046_DistTN.WBTSIdS,S046_DistTN.RNCT,S046_DistTN.WBTSIdT,S046_DistTN.WCEL_IdT,S046_DistTN.WBTSS,S046_DistTN.WBTST,S046_DistTN.adjQTY,S046_DistTN.Att AS ATT1, DET_DistF.CPICH_ECNO_DET_DENOM_M1028C1 AS ATT2, S046_DistTN.Att AS ATTF, S046_DistTN.ClusterS,S046_DistTN.ClusterT,S046_DistTN.RegionS,S046_DistTN.RegionT,S046_DistTN.Distance,S046_DistTN.DRPs_AFT_MISS ,S046_DistTN.SHOOvrHd
FROM S046_DistTN LEFT JOIN DET_DistF ON (S046_DistTN.RNCS = DET_DistF.RNCS) AND (S046_DistTN.WBTSIdS = DET_DistF.WBTSIdS) AND (S046_DistTN.WCEL_IdS = DET_DistF.WCEL_IdS) AND (S046_DistTN.RNCT = DET_DistF.RNCT) AND (S046_DistTN.WBTSIdT = DET_DistF.WBTSIdT) AND (S046_DistTN.WCEL_IdT = DET_DistF.WCEL_IdT)
WHERE (DET_DistF.CPICH_ECNO_DET_DENOM_M1028C1 IS NULL) AND (1*S046_DistTN.Att > 500) ;   --just 046 records > 500 att
--
--Left Join DET Query. DET only Missing Cells
--
--DROP TABLE IF EXISTS MISS3;
--CREATE TABLE MISS3 AS
INSERT INTO MISS1
SELECT
DET_DistF.KEY1, DET_DistF.KEY2, DET_DistF.WCELS,DET_DistF.WCELT,DET_DistF.RNCS,DET_DistF.WCEL_IdS,DET_DistF.TargetCellDN,DET_DistF.WBTSIdS,DET_DistF.RNCT,DET_DistF.WBTSIdT,DET_DistF.WCEL_IdT,DET_DistF.WBTSS,DET_DistF.WBTST,DET_DistF.adjS_QTY,S046_DistTN.Att AS ATT1, DET_DistF.CPICH_ECNO_DET_DENOM_M1028C1 AS ATT2, DET_DistF.CPICH_ECNO_DET_DENOM_M1028C1 AS ATTF, DET_DistF.ClusterS,DET_DistF.ClusterT,DET_DistF.RegionS,DET_DistF.RegionT,DET_DistF.Distance,DET_DistF.DRPs_AFT_MISS ,DET_DistF.SHOOvrHd
FROM DET_DistF LEFT JOIN S046_DistTN ON (DET_DistF.RNCS = S046_DistTN.RNCS) AND (DET_DistF.WBTSIdS = S046_DistTN.WBTSIdS) AND (DET_DistF.WCEL_IdS = S046_DistTN.WCEL_IdS) AND (DET_DistF.RNCT = S046_DistTN.RNCT) AND (DET_DistF.WBTSIdT = S046_DistTN.WBTSIdT) AND (DET_DistF.WCEL_IdT = S046_DistTN.WCEL_IdT)
WHERE (S046_DistTN.Att) IS NULL;   --just DET records
--
--
--depuration queries due to different target distance according to cluster types
--src city tgt dep
--DROP TABLE IF EXISTS MISS2;
--CREATE TABLE MISS2 AS
DELETE FROM MISS2;
INSERT INTO MISS2
SELECT
MISS1.KEY1,MISS1.KEY2,MISS1.WCELS,MISS1.WCELT,MISS1.RNCS,MISS1.WCEL_IdS,MISS1.TargetCellDN,MISS1.WBTSIdS,MISS1.RNCT,MISS1.WBTSIdT,MISS1.WCEL_IdT,MISS1.WBTSS,MISS1.WBTST,MISS1.adjQTY,MISS1.ATT1,MISS1.ATT2,MISS1.ATTF,MISS1.ClusterS,MISS1.ClusterT,MISS1.RegionS,MISS1.RegionT,MISS1.Distance,MISS1.DRPs_AFT_MISS,MISS1.SHOOvrHd, "C" AS TypeS, "D" AS TypeT
FROM MISS1
WHERE (1*MISS1.Distance <2001) AND ((SUBSTR(MISS1.WCELS,1,3) = "MED") OR (SUBSTR(MISS1.WCELS,1,3) = "MAN") OR (SUBSTR(MISS1.WCELS,1,3) = "PER") OR (SUBSTR(MISS1.WCELS,1,3) = "ARM")) AND ((SUBSTR(MISS1.WCELT,1,3) = "ANT") OR (SUBSTR(MISS1.WCELT,1,3) = "CAD") OR (SUBSTR(MISS1.WCELT,1,3) = "RIS") OR (SUBSTR(MISS1.WCELT,1,3) = "CHO") OR (SUBSTR(MISS1.WCELT,1,3) = "QUB") OR (SUBSTR(MISS1.WCELT,1,3) = "BOL") OR (SUBSTR(MISS1.WCELT,1,3) = "COR") OR (SUBSTR(MISS1.WCELT,1,3) = "TOL") OR (SUBSTR(MISS1.WCELT,1,3) = "SND") OR (SUBSTR(MISS1.WCELT,1,3) = "BOY") OR (SUBSTR(MISS1.WCELT,1,3) = "VAL") OR (SUBSTR(MISS1.WCELT,1,3) = "CUN"));
--
--src city tgt city
--
INSERT INTO MISS2
SELECT
MISS1.KEY1,MISS1.KEY2,MISS1.WCELS,MISS1.WCELT,MISS1.RNCS,MISS1.WCEL_IdS,MISS1.TargetCellDN,MISS1.WBTSIdS,MISS1.RNCT,MISS1.WBTSIdT,MISS1.WCEL_IdT,MISS1.WBTSS,MISS1.WBTST,MISS1.adjQTY,MISS1.ATT1,MISS1.ATT2,MISS1.ATTF,MISS1.ClusterS,MISS1.ClusterT,MISS1.RegionS,MISS1.RegionT,MISS1.Distance,MISS1.DRPs_AFT_MISS,MISS1.SHOOvrHd, "C" AS TypeS, "C" AS TypeT
FROM MISS1
WHERE (1*MISS1.Distance <1001) AND ((SUBSTR(MISS1.WCELS,1,3) = "MED") OR (SUBSTR(MISS1.WCELS,1,3) = "MAN") OR (SUBSTR(MISS1.WCELS,1,3) = "PER") OR (SUBSTR(MISS1.WCELS,1,3) = "ARM")) AND ((SUBSTR(MISS1.WCELT,1,3) = "MED") OR (SUBSTR(MISS1.WCELT,1,3) = "MAN") OR (SUBSTR(MISS1.WCELT,1,3) = "PER") OR (SUBSTR(MISS1.WCELT,1,3) = "ARM"));
--
--src dep tgt dep
--
INSERT INTO MISS2
SELECT
MISS1.KEY1,MISS1.KEY2,MISS1.WCELS,MISS1.WCELT,MISS1.RNCS,MISS1.WCEL_IdS,MISS1.TargetCellDN,MISS1.WBTSIdS,MISS1.RNCT,MISS1.WBTSIdT,MISS1.WCEL_IdT,MISS1.WBTSS,MISS1.WBTST,MISS1.adjQTY,MISS1.ATT1,MISS1.ATT2,MISS1.ATTF,MISS1.ClusterS,MISS1.ClusterT,MISS1.RegionS,MISS1.RegionT,MISS1.Distance,MISS1.DRPs_AFT_MISS,MISS1.SHOOvrHd, "D" AS TypeS, "D" AS TypeT
FROM MISS1
WHERE (1*MISS1.Distance <10001) AND ((SUBSTR(MISS1.WCELS,1,3) = "ANT") OR (SUBSTR(MISS1.WCELS,1,3) = "CAD") OR (SUBSTR(MISS1.WCELS,1,3) = "RIS") OR (SUBSTR(MISS1.WCELS,1,3) = "CHO") OR (SUBSTR(MISS1.WCELS,1,3) = "QUB") OR (SUBSTR(MISS1.WCELS,1,3) = "BOL") OR (SUBSTR(MISS1.WCELS,1,3) = "COR") OR (SUBSTR(MISS1.WCELS,1,3) = "TOL") OR (SUBSTR(MISS1.WCELS,1,3) = "SND") OR (SUBSTR(MISS1.WCELS,1,3) = "BOY") OR (SUBSTR(MISS1.WCELS,1,3) = "VAL") OR (SUBSTR(MISS1.WCELS,1,3) = "CUN")) AND ((SUBSTR(MISS1.WCELT,1,3) = "ANT") OR (SUBSTR(MISS1.WCELT,1,3) = "CAD") OR (SUBSTR(MISS1.WCELT,1,3) = "RIS") OR (SUBSTR(MISS1.WCELT,1,3) = "CHO") OR (SUBSTR(MISS1.WCELT,1,3) = "QUB") OR (SUBSTR(MISS1.WCELT,1,3) = "BOL") OR (SUBSTR(MISS1.WCELT,1,3) = "COR") OR (SUBSTR(MISS1.WCELT,1,3) = "TOL") OR (SUBSTR(MISS1.WCELT,1,3) = "SND") OR (SUBSTR(MISS1.WCELT,1,3) = "BOY") OR (SUBSTR(MISS1.WCELT,1,3) = "VAL") OR (SUBSTR(MISS1.WCELT,1,3) = "CUN"));
--
--src dep tgt city
--
INSERT INTO MISS2
SELECT
MISS1.KEY1,MISS1.KEY2,MISS1.WCELS,MISS1.WCELT,MISS1.RNCS,MISS1.WCEL_IdS,MISS1.TargetCellDN,MISS1.WBTSIdS,MISS1.RNCT,MISS1.WBTSIdT,MISS1.WCEL_IdT,MISS1.WBTSS,MISS1.WBTST,MISS1.adjQTY,MISS1.ATT1,MISS1.ATT2,MISS1.ATTF,MISS1.ClusterS,MISS1.ClusterT,MISS1.RegionS,MISS1.RegionT,MISS1.Distance,MISS1.DRPs_AFT_MISS,MISS1.SHOOvrHd, "D" AS TypeS, "C" AS TypeT
FROM MISS1
WHERE (1*MISS1.Distance <2001) AND ((SUBSTR(MISS1.WCELS,1,3) = "ANT") OR (SUBSTR(MISS1.WCELS,1,3) = "CAD") OR (SUBSTR(MISS1.WCELS,1,3) = "RIS") OR (SUBSTR(MISS1.WCELS,1,3) = "CHO") OR (SUBSTR(MISS1.WCELS,1,3) = "QUB") OR (SUBSTR(MISS1.WCELS,1,3) = "BOL") OR (SUBSTR(MISS1.WCELS,1,3) = "COR") OR (SUBSTR(MISS1.WCELS,1,3) = "TOL") OR (SUBSTR(MISS1.WCELS,1,3) = "SND") OR (SUBSTR(MISS1.WCELS,1,3) = "BOY") OR (SUBSTR(MISS1.WCELS,1,3) = "VAL") OR (SUBSTR(MISS1.WCELS,1,3) = "CUN")) AND ((SUBSTR(MISS1.WCELT,1,3) = "MED") OR (SUBSTR(MISS1.WCELT,1,3) = "MAN") OR (SUBSTR(MISS1.WCELT,1,3) = "PER") OR (SUBSTR(MISS1.WCELT,1,3) = "ARM"));
--
--MISS qty per cell
--
--DROP TABLE IF EXISTS MISS_Q;
--CREATE TABLE MISS_Q AS
DELETE FROM MISS_Q;
INSERT INTO MISS_Q
SELECT
MISS2.RNCS,MISS2.WBTSIdS,MISS2.WCEL_IdS, COUNT (MISS2.KEY1) AS MISS_QTY
FROM MISS2
GROUP BY MISS2.RNCS,MISS2.WBTSIdS,MISS2.WCEL_IdS; 
--
--Missing ordered by wcels and attf
--
DROP TABLE IF EXISTS MISS3;
CREATE TABLE MISS3 AS
SELECT
MISS2.KEY1, MISS2.KEY2, MISS2.WCELS, MISS2.WCELT, MISS2.RNCS, MISS2.WCEL_IdS, MISS2.TargetCellDN, MISS2.WBTSIdS, MISS2.RNCT, MISS2.WBTSIdT, MISS2.WCEL_IdT, MISS2.WBTSS, MISS2.WBTST, MISS2.adjQTY, MISS2.ATT1, MISS2.ATT2, MISS2.ATTF, MISS2.ClusterS, MISS2.ClusterT, MISS2.RegionS, MISS2.RegionT, MISS2.Distance, MISS2.DRPs_AFT_MISS, MISS2.SHOOvrHd, MISS2.TypeS, MISS2.TypeT, MISS_Q.MISS_QTY
FROM MISS2 INNER JOIN MISS_Q ON (MISS2.RNCS = MISS_Q.RNCS) AND (MISS2.WBTSIdS = MISS_Q.WBTSIdS) AND (MISS2.WCEL_IdS = MISS_Q.WCEL_IdS)
ORDER BY MISS2.WCELS, MISS2.ATTF DESC;
--
--
--
--
-- ADCE Unidentifyed. Version including ADCE INFO
--
--
DROP TABLE IF EXISTS RSBSS015_1;
CREATE TABLE RSBSS015_1 AS
SELECT RSBSS015.BTSname || BTS_1.name AS KEY, RSBSS015.BSCname, RSBSS015.BCFname, RSBSS015.BTSname, BTS_1.Name AS BTSnameT, BTS.BSC_Id, BTS.BCF_Id, BTS.BTS_Id,  BTS.cellId, BTS.locationAreaIdLAC, BSC_1.name AS BSCnameT, BCF_1.Name AS BCFnameT, BTS_1.bsc_Id AS bsc_Idt, BTS_1.bcf_Id AS bcf_Idt, BTS_1.bts_Id AS bts_Idt, BTS.bsIdentityCodeNCC AS NCC, BTS.bsIdentityCodeBCC AS BCC, BTS_1.bsIdentityCodeNCC AS NCCT, BTS_1.bsIdentityCodeBCC AS BCCT, CASE WHEN BTS.bsIdentityCodeNCC||BTS.bsIdentityCodeBCC = BTS_1.bsIdentityCodeNCC||BTS_1.bsIdentityCodeBCC THEN 1 ELSE 0 END AS sameBSIC, RSBSS015.ci_id AS adjCI, RSBSS015.lac_id AS adjLac, RSBSS015.mcc_id AS adjMCC, RSBSS015.mnc_id AS adjMNC, RSBSS015.ttp_id, Baseline.Market || '-' || Baseline."Localidad (CRC)" AS ClusterS, Baseline_1.Market || '-' || Baseline_1."Localidad (CRC)" AS ClusterT, Baseline.region AS RegionS, Baseline_1.Region AS RegionT, RSBSS015.HOOutAtt,RSBSS015.HOOutFail,RSBSS015.HOOutFR,RSBSS015.HOOutBlk,RSBSS015.HOInAtt,RSBSS015.HOInFail,RSBSS015.HOInFR,RSBSS015.HOInBlk, ADCE.adjcIndex, ADCE.adjCellLayer, ADCE.hoLevelUmbrella, ADCE.hoLoadFactor, ADCE.hoMarginLev, ADCE.hoMarginPbgt, ADCE.name AS BTSnameT2, ADCE.targetCellDN,
ROUND (
      12756273.2 * ASIN(
                        MIN (1 , 
                                SQRT(
                                    POWER( SIN(RADIANS(Baseline.Latitud - Baseline_1.Latitud)/2) , 2) + 
                                    COS(RADIANS(Baseline.Latitud)) * COS(RADIANS(Baseline_1.Latitud)) * POWER ( SIN(RADIANS(Baseline.Longitud - Baseline_1.Longitud)/2) , 2)
                                      )
                            )
                        )
         , 0) AS Distance
FROM ((((((((RSBSS015 
LEFT JOIN BTS ON (RSBSS015.BTSname = BTS.Name)) 
INNER JOIN ADCE ON (BTS.BSC_id = ADCE.bsc_id) AND (BTS.BCF_id = ADCE.bcf_id) AND (BTS.BTS_id = ADCE.bts_id) AND (1*RSBSS015.ci_id = 1*ADCE.adjacentCellIdCI) AND (1*RSBSS015.lac_id = 1*ADCE.adjacentCellIdLac))
LEFT JOIN BTS AS BTS_1 ON (RSBSS015.lac_id = BTS_1.locationAreaIdLAC) AND (RSBSS015.ci_id = BTS_1.cellId)) 
LEFT JOIN BCF ON (BTS.bsc_id = BCF.bsc_id) AND (BTS.bcf_id = BCF.bcf_id))
LEFT JOIN BCF AS BCF_1 ON (BTS_1.bsc_id = BCF_1.bsc_id) AND (BTS_1.bcf_id = BCF_1.bcf_id)) 
LEFT JOIN baseline ON (BCF.Name = baseline.Sitio))
LEFT JOIN baseline AS baseline_1 ON (BCF_1.Name = Baseline_1.Sitio)) 
LEFT JOIN BSC ON (BTS.BSC_id = BSC.BSC_id))
LEFT JOIN BSC AS BSC_1 ON (BTS_1.BSC_id = BSC_1.BSC_id)
WHERE (RSBSS015.BTSname <> BTS_1.name) AND ((ADCE.PLMN_id = 'RC8') OR (RSBSS015.BTSname LIKE 'ANT%') OR (RSBSS015.BTSname LIKE 'MED%') OR (RSBSS015.BTSname LIKE 'CAD%') OR (RSBSS015.BTSname LIKE 'MAN%') OR (RSBSS015.BTSname LIKE 'RIS%') OR (RSBSS015.BTSname LIKE 'PER%') OR (RSBSS015.BTSname LIKE 'QUI%') OR (RSBSS015.BTSname LIKE 'ARM%') OR (RSBSS015.BTSname LIKE 'CHO%') OR (RSBSS015.BTSname LIKE 'QUB%'))
ORDER BY RSBSS015.BTSname, RSBSS015.HOOutAtt DESC, RSBSS015.HOInAtt DESC;
--
--Max Att in to avoid duplicates
--
DROP TABLE IF EXISTS RSBSS015_2;
CREATE TABLE RSBSS015_2 AS
SELECT
RSBSS015_1.KEY, 1*MAX(RSBSS015_1.HOOutAtt) AS HOOutAttMax, RSBSS015_1.HOInAtt
FROM RSBSS015_1
GROUP BY RSBSS015_1.KEY;
--
--original table without duplicates iNPUT TO UNDEFINED PROCESS 
--
DROP TABLE IF EXISTS RSBSS015_3;
CREATE TABLE RSBSS015_3 AS
SELECT
RSBSS015_1.KEY,RSBSS015_1.BSCname,RSBSS015_1.BCFname,RSBSS015_1.BTSname,RSBSS015_1.BTSnameT,RSBSS015_1.BSC_id,RSBSS015_1.BCF_id,RSBSS015_1.BTS_id,RSBSS015_1.cellId,RSBSS015_1.locationAreaIdLAC,RSBSS015_1.BSCnameT,RSBSS015_1.BCFnameT,RSBSS015_1.bsc_Idt,RSBSS015_1.bcf_Idt,RSBSS015_1.bts_Idt,RSBSS015_1.NCC,RSBSS015_1.BCC,RSBSS015_1.NCCT,RSBSS015_1.BCCT,RSBSS015_1.sameBSIC,RSBSS015_1.adjCI,RSBSS015_1.adjLac,RSBSS015_1.adjMCC,RSBSS015_1.adjMNC,RSBSS015_1.ttp_id,RSBSS015_1.ClusterS,RSBSS015_1.ClusterT,RSBSS015_1.RegionS,RSBSS015_1.RegionT,RSBSS015_1.HOOutAtt,RSBSS015_1.HOOutFail,RSBSS015_1.HOOutFR,RSBSS015_1.HOOutBlk,RSBSS015_1.HOInAtt,RSBSS015_1.HOInFail,RSBSS015_1.HOInFR,RSBSS015_1.HOInBlk,RSBSS015_1.adjcIndex,RSBSS015_1.adjCellLayer,RSBSS015_1.hoLevelUmbrella,RSBSS015_1.hoLoadFactor,RSBSS015_1.hoMarginLev,RSBSS015_1.hoMarginPbgt,RSBSS015_1.BTSnameT2,RSBSS015_1.targetCellDN,RSBSS015_1.Distance
FROM RSBSS015_1 INNER JOIN RSBSS015_2 ON (RSBSS015_1.KEY = RSBSS015_2.KEY) AND (RSBSS015_1.HOOutAtt = RSBSS015_2.HOOutAttMax) AND (RSBSS015_1.HOInAtt = RSBSS015_2.HOInAtt)
ORDER BY RSBSS015_1.BTSname, 1*(RSBSS015_1.HOOutAtt);
--
--
--
--Report 013
--BTS for NorOcc and neighbors
--
DROP TABLE IF EXISTS BTS_V;
CREATE TABLE BTS_V AS
SELECT *
FROM BTS INNER JOIN BSC ON BTS.BSC_id = BSC.BSC_id
WHERE (BTS.PLMN_id LIKE '%RC8%') OR (BSC.name LIKE '%PER%') OR (SUBSTR(BTS.name,1,3) = "BOL") OR (SUBSTR(BTS.name,1,3) = "COR") OR (SUBSTR(BTS.name,1,3) = "TOL") OR (SUBSTR(BTS.name,1,3) = "SND") OR (SUBSTR(BTS.name,1,3) = "BOY") OR (SUBSTR(BTS.name,1,3) = "VAL") OR (SUBSTR(BTS.name,1,3) = "CUN");
--
--
-- top detect list. Samples/10 to balance amount vs 015 report
--
DROP TABLE IF EXISTS UNIDENT_1;
CREATE TABLE UNIDENT_1 AS
SELECT
RSBSS013.BSCname,RSBSS013.BCFname,RSBSS013.BTSname,RSBSS013.ncc_id,RSBSS013.bcc_id,RSBSS013.bcch_id,RSBSS013.UNDADJOFBTS_AVGDLSIGSTR AS AVSIGSTR,RSBSS013.UNDADJOFBTS_Nbrofsamples/10 AS samples
FROM RSBSS013
WHERE 1*RSBSS013.UNDADJOFBTS_Nbrofsamples > 15000;
--
--
--combination selection < 50KMS
--
DROP TABLE IF EXISTS UND_DistT;
CREATE TABLE UND_DistT AS
SELECT
UNIDENT_1.BTSname || UNIDENT_1.ncc_id || UNIDENT_1.bcc_id || UNIDENT_1.bcch_id AS KEY, UNIDENT_1.BTSname AS BTSS, BTS_V.Name AS BTST, UNIDENT_1.BSCname AS BSCS, UNIDENT_1.BCFname AS BCFS, BSC_1.Name AS BSCT, BCF_1.Name AS BCFT, BTS.BSC_id AS BSCidS, BTS.BCF_id AS BCFidS, BTS.BTS_id AS BTSidS, BTS.cellId AS cellIdS, 1*(BTS.bsIdentityCodeNCC || BTS.bsIdentityCodeBCC) AS BSICS, TRX.initialFrequency AS BCCHS, BTS_V.BSC_id AS BSCidT, BTS_V.BCF_id AS BCFidT, BTS_V.BTS_id AS BTSidT, BTS_V.cellId AS cellIdT, BTS_V.locationAreaIdLAC AS LACT, 1*(UNIDENT_1.ncc_id || UNIDENT_1.bcc_id) AS BsicT, UNIDENT_1.ncc_id, UNIDENT_1.bcc_id, UNIDENT_1.bcch_id AS BCCHT, UNIDENT_1.AVSIGSTR,UNIDENT_1.samples, "PLMN-" || BTS_V.PLMN_Id || "/BSC-" || BTS_V.BSC_Id || "/BCF-" || BTS_V.BCF_Id || "/BTS-" || BTS_V.BTS_Id AS DistNameT,
Baseline.Market || '-' || Baseline."Localidad (CRC)" AS ClusterS, Baseline_1.Market || '-' || Baseline_1."Localidad (CRC)" AS ClusterT, Baseline.region AS RegionS, Baseline_1.Region AS RegionT, 
ROUND (
      12756273.2 * ASIN(
                        MIN (1 , 
                                SQRT(
                                    POWER( SIN(RADIANS(Baseline.Latitud - Baseline_1.Latitud)/2) , 2) + 
                                    COS(RADIANS(Baseline.Latitud)) * COS(RADIANS(Baseline_1.Latitud)) * POWER ( SIN(RADIANS(Baseline.Longitud - Baseline_1.Longitud)/2) , 2)
                                      )
                            )
                        )
         , 0) AS Distance
FROM (((((((((UNIDENT_1 
LEFT JOIN BTS ON (UNIDENT_1.BTSname = BTS.Name))
LEFT JOIN TRX ON (BTS.BSC_Id = TRX.BSC_Id) AND (BTS.BCF_Id = TRX.BCF_Id) AND  (BTS.BTS_Id = TRX.BTS_Id)) 
LEFT JOIN BTS_V ON (UNIDENT_1.ncc_id = BTS_V.bsIdentityCodeNCC) AND (UNIDENT_1.bcc_id = BTS_V.bsIdentityCodeBCC))
LEFT JOIN TRX AS TRX_1 ON (BTS_V.BSC_Id = TRX_1.BSC_Id) AND (BTS_V.BCF_Id = TRX_1.BCF_Id) AND  (BTS_V.BTS_Id = TRX_1.BTS_Id) AND (UNIDENT_1.bcch_id = TRX_1.initialFrequency)) 
LEFT JOIN BCF ON (BTS.BSC_id = BCF.BSC_id) AND (BTS.BCF_id = BCF.BCF_id))
LEFT JOIN BCF AS BCF_1 ON (BTS_V.BSC_id = BCF_1.BSC_id) AND (BTS_V.BCF_id = BCF_1.BCF_id))   
LEFT JOIN Baseline ON (BCF.Name = Baseline.Sitio)) 
LEFT JOIN Baseline AS Baseline_1 ON (BCF_1.Name = Baseline_1.Sitio)) 
LEFT JOIN BSC ON BTS.BSC_id = BSC.BSC_id) 
LEFT JOIN BSC AS BSC_1 ON BTS_V.BSC_Id = BSC_1.BSC_Id
WHERE (ROUND (
      12756273.2 * ASIN(
                        MIN (1 , 
                                SQRT(
                                    POWER( SIN(RADIANS(Baseline.Latitud - Baseline_1.Latitud)/2) , 2) + 
                                    COS(RADIANS(Baseline.Latitud)) * COS(RADIANS(Baseline_1.Latitud)) * POWER ( SIN(RADIANS(Baseline.Longitud - Baseline_1.Longitud)/2) , 2)
                                      )
                            )
                        )
         , 0) < 50000) AND (TRX.channel0Type)=4 AND (TRX_1.channel0Type)=4 AND (UNIDENT_1.BSCname LIKE '%MED%' OR UNIDENT_1.BSCname LIKE '%MGA%' OR UNIDENT_1.BSCname LIKE '%PER%')
ORDER BY BTS.name, UNIDENT_1.bcch_id, UNIDENT_1.ncc_id, UNIDENT_1.bcc_id;
--
--toma menor distancia de la llave
--
DROP TABLE IF EXISTS UND_DistMin;
CREATE TABLE UND_DistMin AS
SELECT
UND_DistT.Key, 1*(Min(UND_DistT.Distance)) AS MinOfDistancia
FROM UND_DistT
GROUP BY UND_DistT.Key;
--
--ADCE QTY PER CELL
--
DROP TABLE IF EXISTS ADCE_QTY;
CREATE TABLE ADCE_QTY AS
SELECT
ADCE.PLMN_id, ADCE.BSC_id, ADCE.BCF_id, ADCE.BTS_id, 1*(COUNT (ADCE.adjcIndex)) AS ADCE_QTY
FROM ADCE
GROUP BY ADCE.BSC_id, ADCE.BCF_id, ADCE.BTS_id; 
--
--
--Unidentified Result
--
DROP TABLE IF EXISTS UND_DistF;
CREATE TABLE UND_DistF AS
SELECT
1*(UND_DistT.BSCidS || UND_DistT.cellIdS) AS KEY1, UND_DistT.BTSS,UND_DistT.BTST, UND_DistT.Distance, ADCE_QTY.ADCE_QTY, UND_DistT.ClusterS, UND_DistT.ClusterT, UND_DistT.KEY,
UND_DistT.BSCS,UND_DistT.BCFS,UND_DistT.BSCT,UND_DistT.BCFT,UND_DistT.BSCidS,UND_DistT.BCFidS,UND_DistT.BTSidS,UND_DistT.cellIdS,UND_DistT.BSICS,UND_DistT.BCCHS,UND_DistT.BSCidT,UND_DistT.BCFidT,UND_DistT.BTSidT,UND_DistT.cellIdT,UND_DistT.LACT,UND_DistT.BsicT,UND_DistT.ncc_id,UND_DistT.bcc_id,UND_DistT.BCCHT,UND_DistT.AVSIGSTR,UND_DistT.samples,UND_DistT.DistNameT,UND_DistT.RegionS,UND_DistT.RegionT,1*(UND_DistT.BSCidS|| UND_DistT.cellIdS || UND_DistT.BSCidT|| UND_DistT.cellIdT) AS KEY2
FROM (UND_DistT INNER JOIN UND_DistMin ON (UND_DistT.Distance = UND_DistMin.MinOfDistancia) AND (UND_DistT.Key = UND_DistMin.Key)) LEFT JOIN ADCE_QTY ON (UND_DistT.BSCidS = ADCE_QTY.BSC_id) AND (UND_DistT.BCFidS = ADCE_QTY.BCF_id) AND (UND_DistT.BTSidS = ADCE_QTY.BTS_id)  
WHERE (UND_DistT.BTSS <> UND_DistT.BTST)
ORDER BY UND_DistT.Distance;
--
--
--depuration queries due to different target distance according to cluster types
--src city tgt dep
DROP TABLE IF EXISTS UND_DistF1;
CREATE TABLE UND_DistF1 AS
--DELETE FROM UND_DistF1;
--INSERT INTO UND_DistF1
SELECT
UND_DistF.KEY1,UND_DistF.BTSS,UND_DistF.BTST,UND_DistF.Distance,UND_DistF.ADCE_QTY,UND_DistF.ClusterS,UND_DistF.ClusterT,UND_DistF.KEY,UND_DistF.BSCS,UND_DistF.BCFS,UND_DistF.BSCT,UND_DistF.BCFT,UND_DistF.BSCidS,UND_DistF.BCFidS,UND_DistF.BTSidS,UND_DistF.cellIdS,UND_DistF.BSICS,UND_DistF.BCCHS,UND_DistF.BSCidT,UND_DistF.BCFidT,UND_DistF.BTSidT,UND_DistF.cellIdT,UND_DistF.LACT,UND_DistF.BsicT,UND_DistF.ncc_id,UND_DistF.bcc_id,UND_DistF.BCCHT,UND_DistF.AVSIGSTR,UND_DistF.samples,UND_DistF.DistNameT,UND_DistF.RegionS,UND_DistF.RegionT,UND_DistF.KEY2, "C" AS TypeS, "D" AS TypeT
FROM UND_DistF
WHERE (1*UND_DistF.Distance <2501) AND ((SUBSTR(UND_DistF.BTSS,1,3) = "MED") OR (SUBSTR(UND_DistF.BTSS,1,3) = "MAN") OR (SUBSTR(UND_DistF.BTSS,1,3) = "PER") OR (SUBSTR(UND_DistF.BTSS,1,3) = "ARM")) AND ((SUBSTR(UND_DistF.BTST,1,3) = "ANT") OR (SUBSTR(UND_DistF.BTST,1,3) = "CAD") OR (SUBSTR(UND_DistF.BTST,1,3) = "RIS") OR (SUBSTR(UND_DistF.BTST,1,3) = "CHO") OR (SUBSTR(UND_DistF.BTST,1,3) = "QUB") OR (SUBSTR(UND_DistF.BTST,1,3) = "BOL") OR (SUBSTR(UND_DistF.BTST,1,3) = "COR") OR (SUBSTR(UND_DistF.BTST,1,3) = "TOL") OR (SUBSTR(UND_DistF.BTST,1,3) = "SND") OR (SUBSTR(UND_DistF.BTST,1,3) = "BOY") OR (SUBSTR(UND_DistF.BTST,1,3) = "VAL") OR (SUBSTR(UND_DistF.BTST,1,3) = "CUN"));
--
--src city tgt city
--
INSERT INTO UND_DistF1
SELECT
UND_DistF.KEY1,UND_DistF.BTSS,UND_DistF.BTST,UND_DistF.Distance,UND_DistF.ADCE_QTY,UND_DistF.ClusterS,UND_DistF.ClusterT,UND_DistF.KEY,UND_DistF.BSCS,UND_DistF.BCFS,UND_DistF.BSCT,UND_DistF.BCFT,UND_DistF.BSCidS,UND_DistF.BCFidS,UND_DistF.BTSidS,UND_DistF.cellIdS,UND_DistF.BSICS,UND_DistF.BCCHS,UND_DistF.BSCidT,UND_DistF.BCFidT,UND_DistF.BTSidT,UND_DistF.cellIdT,UND_DistF.LACT,UND_DistF.BsicT,UND_DistF.ncc_id,UND_DistF.bcc_id,UND_DistF.BCCHT,UND_DistF.AVSIGSTR,UND_DistF.samples,UND_DistF.DistNameT,UND_DistF.RegionS,UND_DistF.RegionT,UND_DistF.KEY2, "C" AS TypeS, "C" AS TypeT
FROM UND_DistF
WHERE (1*UND_DistF.Distance <1501) AND ((SUBSTR(UND_DistF.BTSS,1,3) = "MED") OR (SUBSTR(UND_DistF.BTSS,1,3) = "MAN") OR (SUBSTR(UND_DistF.BTSS,1,3) = "PER") OR (SUBSTR(UND_DistF.BTSS,1,3) = "ARM")) AND ((SUBSTR(UND_DistF.BTST,1,3) = "MED") OR (SUBSTR(UND_DistF.BTST,1,3) = "MAN") OR (SUBSTR(UND_DistF.BTST,1,3) = "PER") OR (SUBSTR(UND_DistF.BTST,1,3) = "ARM"));
--
--src dep tgt dep
--
INSERT INTO UND_DistF1
SELECT
UND_DistF.KEY1,UND_DistF.BTSS,UND_DistF.BTST,UND_DistF.Distance,UND_DistF.ADCE_QTY,UND_DistF.ClusterS,UND_DistF.ClusterT,UND_DistF.KEY,UND_DistF.BSCS,UND_DistF.BCFS,UND_DistF.BSCT,UND_DistF.BCFT,UND_DistF.BSCidS,UND_DistF.BCFidS,UND_DistF.BTSidS,UND_DistF.cellIdS,UND_DistF.BSICS,UND_DistF.BCCHS,UND_DistF.BSCidT,UND_DistF.BCFidT,UND_DistF.BTSidT,UND_DistF.cellIdT,UND_DistF.LACT,UND_DistF.BsicT,UND_DistF.ncc_id,UND_DistF.bcc_id,UND_DistF.BCCHT,UND_DistF.AVSIGSTR,UND_DistF.samples,UND_DistF.DistNameT,UND_DistF.RegionS,UND_DistF.RegionT,UND_DistF.KEY2, "D" AS TypeS, "D" AS TypeT
FROM UND_DistF
WHERE (1*UND_DistF.Distance <12001) AND ((SUBSTR(UND_DistF.BTSS,1,3) = "ANT") OR (SUBSTR(UND_DistF.BTSS,1,3) = "CAD") OR (SUBSTR(UND_DistF.BTSS,1,3) = "RIS") OR (SUBSTR(UND_DistF.BTSS,1,3) = "CHO") OR (SUBSTR(UND_DistF.BTSS,1,3) = "QUB") OR (SUBSTR(UND_DistF.BTSS,1,3) = "BOL") OR (SUBSTR(UND_DistF.BTSS,1,3) = "COR") OR (SUBSTR(UND_DistF.BTSS,1,3) = "TOL") OR (SUBSTR(UND_DistF.BTSS,1,3) = "SND") OR (SUBSTR(UND_DistF.BTSS,1,3) = "BOY") OR (SUBSTR(UND_DistF.BTSS,1,3) = "VAL") OR (SUBSTR(UND_DistF.BTSS,1,3) = "CUN")) AND ((SUBSTR(UND_DistF.BTST,1,3) = "ANT") OR (SUBSTR(UND_DistF.BTST,1,3) = "CAD") OR (SUBSTR(UND_DistF.BTST,1,3) = "RIS") OR (SUBSTR(UND_DistF.BTST,1,3) = "CHO") OR (SUBSTR(UND_DistF.BTST,1,3) = "QUB") OR (SUBSTR(UND_DistF.BTST,1,3) = "BOL") OR (SUBSTR(UND_DistF.BTST,1,3) = "COR") OR (SUBSTR(UND_DistF.BTST,1,3) = "TOL") OR (SUBSTR(UND_DistF.BTST,1,3) = "SND") OR (SUBSTR(UND_DistF.BTST,1,3) = "BOY") OR (SUBSTR(UND_DistF.BTST,1,3) = "VAL") OR (SUBSTR(UND_DistF.BTST,1,3) = "CUN"));
--
--src dep tgt city
--
INSERT INTO UND_DistF1
SELECT
UND_DistF.KEY1,UND_DistF.BTSS,UND_DistF.BTST,UND_DistF.Distance,UND_DistF.ADCE_QTY,UND_DistF.ClusterS,UND_DistF.ClusterT,UND_DistF.KEY,UND_DistF.BSCS,UND_DistF.BCFS,UND_DistF.BSCT,UND_DistF.BCFT,UND_DistF.BSCidS,UND_DistF.BCFidS,UND_DistF.BTSidS,UND_DistF.cellIdS,UND_DistF.BSICS,UND_DistF.BCCHS,UND_DistF.BSCidT,UND_DistF.BCFidT,UND_DistF.BTSidT,UND_DistF.cellIdT,UND_DistF.LACT,UND_DistF.BsicT,UND_DistF.ncc_id,UND_DistF.bcc_id,UND_DistF.BCCHT,UND_DistF.AVSIGSTR,UND_DistF.samples,UND_DistF.DistNameT,UND_DistF.RegionS,UND_DistF.RegionT,UND_DistF.KEY2, "D" AS TypeS, "C" AS TypeT
FROM UND_DistF
WHERE (1*UND_DistF.Distance <2501) AND ((SUBSTR(UND_DistF.BTSS,1,3) = "ANT") OR (SUBSTR(UND_DistF.BTSS,1,3) = "CAD") OR (SUBSTR(UND_DistF.BTSS,1,3) = "RIS") OR (SUBSTR(UND_DistF.BTSS,1,3) = "CHO") OR (SUBSTR(UND_DistF.BTSS,1,3) = "QUB") OR (SUBSTR(UND_DistF.BTSS,1,3) = "BOL") OR (SUBSTR(UND_DistF.BTSS,1,3) = "COR") OR (SUBSTR(UND_DistF.BTSS,1,3) = "TOL") OR (SUBSTR(UND_DistF.BTSS,1,3) = "SND") OR (SUBSTR(UND_DistF.BTSS,1,3) = "BOY") OR (SUBSTR(UND_DistF.BTSS,1,3) = "VAL") OR (SUBSTR(UND_DistF.BTSS,1,3) = "CUN")) AND ((SUBSTR(UND_DistF.BTST,1,3) = "MED") OR (SUBSTR(UND_DistF.BTST,1,3) = "MAN") OR (SUBSTR(UND_DistF.BTST,1,3) = "PER") OR (SUBSTR(UND_DistF.BTST,1,3) = "ARM"));
--
--
--Undefined qty per cell
--
DROP TABLE IF EXISTS UND_Q;
CREATE TABLE UND_Q AS
--DELETE FROM UND_Q;
--INSERT INTO UND_Q
SELECT
UND_DistF1.BSCidS,UND_DistF1.BCFidS,UND_DistF1.BTSidS, COUNT (UND_DistF1.KEY) AS UND_QTY
FROM UND_DistF1
GROUP BY UND_DistF1.BSCidS,UND_DistF1.BCFidS,UND_DistF1.BTSidS; 
--
--Missing ordered by wcels and attf. iNPUT TO UNDEFINED PROCESS 
--
--DROP TABLE IF EXISTS UND_DistF2;
--CREATE TABLE UND_DistF2 AS
DELETE FROM UND_DistF2; 
INSERT INTO UND_DistF2 
SELECT
UND_DistF1.KEY1,UND_DistF1.BTSS,UND_DistF1.BTST,UND_DistF1.Distance,UND_DistF1.ADCE_QTY,UND_DistF1.ClusterS,UND_DistF1.ClusterT,UND_DistF1.KEY,UND_DistF1.BSCS,UND_DistF1.BCFS,UND_DistF1.BSCT,UND_DistF1.BCFT,UND_DistF1.BSCidS,UND_DistF1.BCFidS,UND_DistF1.BTSidS,UND_DistF1.cellIdS,UND_DistF1.BSICS,UND_DistF1.BCCHS,UND_DistF1.BSCidT,UND_DistF1.BCFidT,UND_DistF1.BTSidT,UND_DistF1.cellIdT,UND_DistF1.LACT,UND_DistF1.BsicT,UND_DistF1.ncc_id,UND_DistF1.bcc_id,UND_DistF1.BCCHT,UND_DistF1.AVSIGSTR,UND_DistF1.samples,UND_DistF1.DistNameT,UND_DistF1.RegionS,UND_DistF1.RegionT,UND_DistF1.KEY2,UND_DistF1.TypeS,UND_DistF1.TypeT, UND_Q.UND_QTY, CASE WHEN ((CASE WHEN (1*SUBSTR(UND_DistF1.BTSS,-1,1) > 0) THEN 850 ELSE 1900 END) = (CASE WHEN (1*SUBSTR(UND_DistF1.BTST,-1,1) > 0) THEN 850 ELSE 1900 END)) THEN 6 ELSE 63 END AS Pbgt, CASE WHEN ((CASE WHEN (1*SUBSTR(UND_DistF1.BTSS,-1,1) > 0) THEN 850 ELSE 1900 END) < (CASE WHEN (1*SUBSTR(UND_DistF1.BTST,-1,1) > 0) THEN 850 ELSE 1900 END)) THEN 40 ELSE 63 END AS Umbrella
FROM UND_DistF1 INNER JOIN UND_Q ON (UND_DistF1.BSCidS = UND_Q.BSCidS) AND (UND_DistF1.BCFidS = UND_Q.BCFidS) AND (UND_DistF1.BTSidS = UND_Q.BTSidS)
ORDER BY UND_DistF1.BTSS, UND_DistF1.samples DESC;
--
--
--
--
--Table1 PSC audit. incluye coPSC y sus ditancias
--
--
DROP TABLE IF EXISTS PSC_DistT;
CREATE TABLE PSC_DistT AS
SELECT
WCEL.Name || WCEL.PriScrCode AS Key, WCEL.Name AS WcelSRC, WCEL_1.Name AS WcelTGT, WCEL.PriScrCode, CASE WHEN (WBTS.Name = WBTS_1.Name) THEN 1 ELSE 0 END AS SameSite, CASE WHEN (WCEL.UARFCN = WCEL_1.UARFCN) THEN 1 ELSE 0 END AS SameCarrier, WCEL.Rnc_Id, WCEL.WBTS_Id, WCEL.WCEL_Id, WCEL.SectorID AS SidSRC, WCEL_1.Rnc_Id AS RncIdT, WCEL_1.WBTS_Id AS WBTSIdT, WCEL_1.WCEL_Id AS WCEL_IdT, WCEL_1.SectorID AS SidTGT, WCEL.UARFCN AS UARFCN_SRC, WCEL_1.UARFCN AS UARFCN_TGT, WBTS.name AS WbtsSrc, WBTS_1.name AS WbtsTgt,
ROUND (12756273.2 * ASIN(MIN (1 , SQRT(POWER( SIN(RADIANS(Baseline.Latitud - Baseline_1.Latitud)/2) , 2) + COS(RADIANS(Baseline.Latitud)) * COS(RADIANS(Baseline_1.Latitud)) * POWER ( SIN(RADIANS(Baseline.Longitud - Baseline_1.Longitud)/2) , 2)))) , 0) AS Distance
FROM ((((WCEL INNER JOIN WCEL AS WCEL_1 ON (WCEL.PriScrCode = WCEL_1.PriScrCode)) INNER JOIN WBTS ON (WCEL.RNC_id = WBTS.RNC_id) AND (WCEL.WBTS_id = WBTS.WBTS_id)) INNER JOIN WBTS AS WBTS_1 ON (WCEL_1.RNC_id = WBTS_1.RNC_id) AND (WCEL_1.WBTS_id = WBTS_1.WBTS_id)) INNER JOIN baseLine ON (WBTS.Name = baseline.Sitio)) INNER JOIN baseline AS baseline_1 ON (WBTS_1.Name = baseline_1.Sitio)
WHERE ((CASE WHEN (WCEL.UARFCN = WCEL_1.UARFCN) THEN 1 ELSE 0 END) = 1) AND ((CASE WHEN (WCEL.Name = WCEL_1.Name) THEN 1 ELSE 0 END) = 0 ) AND (WCEL.RNC_id LIKE '20%' OR WCEL.RNC_id LIKE '27%');
--
--toma menor distancia de la llave
--
DROP TABLE IF EXISTS PSC_DistMin;
CREATE TABLE PSC_DistMin AS
SELECT
PSC_DistT.Key, Min(PSC_DistT.Distance) AS MinOfDistancia, WCEL_Param.Cluster, WCEL_Param.Encargado
FROM PSC_DistT LEFT JOIN WCEL_Param ON (PSC_DistT.RNC_Id = WCEL_Param.RNC_Id) AND (PSC_DistT.WBTS_Id = WCEL_Param.WBTS_Id) AND (PSC_DistT.WCEL_Id = WCEL_Param.WCEL_Id)
GROUP BY PSC_DistT.Key;
--
--
--Query resultado
--
DROP TABLE IF EXISTS PSC_DistF;
CREATE TABLE PSC_DistF AS
SELECT
PSC_DistMin.Cluster, PSC_DistMin.Encargado, PSC_DistT.Key,PSC_DistT.WcelSRC,PSC_DistT.WcelTGT,PSC_DistT.PriScrCode,PSC_DistT.Distance,PSC_DistT.RNC_id,PSC_DistT.WBTS_id,PSC_DistT.WCEL_id,PSC_DistT.SidSRC,PSC_DistT.RncIdT,PSC_DistT.WBTSIdT,PSC_DistT.WCEL_IdT,PSC_DistT.SidTGT,PSC_DistT.UARFCN_SRC,PSC_DistT.UARFCN_TGT,PSC_DistT.WbtsSrc,PSC_DistT.WbtsTgt ,PSC_DistT.SameSite,PSC_DistT.SameCarrier
FROM PSC_DistT INNER JOIN PSC_DistMin ON (PSC_DistT.Distance = PSC_DistMin.MinOfDistancia) AND (PSC_DistT.Key = PSC_DistMin.Key)
ORDER BY PSC_DistT.Distance;
--
--
--
--
 --LTE
--
--PCI audit. incluye coPCI y sus distancias
--
DROP TABLE IF EXISTS PCI_DistT;
CREATE TABLE PCI_DistT AS
SELECT
LNCEL.Name || LNCEL.phyCellId AS Key, LNCEL.Name AS LNCELSRC, LNCEL_1.Name AS LNCELTGT, LNCEL.phyCellId, CASE WHEN (LNBTS.Name = LNBTS_1.Name) THEN 1 ELSE 0 END AS SameSite, CASE WHEN (LNCEL_FDD.earfcnDL = LNCEL_FDD_1.earfcnDL) THEN 1 ELSE 0 END AS SameCarrier, LNCEL.MRBTS_Id, LNCEL.LNBTS_Id, LNCEL.LNCEL_Id, LNBTS.name||substr(LNCEL.name,-1,1) AS KeySecS, LNCEL_1.MRBTS_Id AS MRBTSIdT, LNCEL_1.LNBTS_Id AS LNBTSIdT, LNCEL_1.LNCEL_Id AS LNCEL_IdT, LNBTS_1.name||substr(LNCEL_1.name,-1,1) AS KeySecT, LNCEL_FDD.earfcnDL AS EARFCN_SRC, LNCEL_FDD_1.earfcnDL AS EARFCN_TGT, LNBTS.name AS LNBTSSrc, LNBTS_1.name AS LNBTSTgt,
ROUND (12756273.2 * ASIN(MIN (1 , SQRT(POWER( SIN(RADIANS(Baseline.Latitud - Baseline_1.Latitud)/2) , 2) + COS(RADIANS(Baseline.Latitud)) * COS(RADIANS(Baseline_1.Latitud)) * POWER ( SIN(RADIANS(Baseline.Longitud - Baseline_1.Longitud)/2) , 2)))) , 0) AS Distance
FROM ((((((LNCEL INNER JOIN LNCEL AS LNCEL_1 ON (LNCEL.phyCellId = LNCEL_1.phyCellId)) INNER JOIN LNCEL_FDD ON (LNCEL.MRBTS_Id = LNCEL_FDD.MRBTS_Id) AND (LNCEL.LNBTS_Id = LNCEL_FDD.LNBTS_Id) AND (LNCEL.LNCEL_Id = LNCEL_FDD.LNCEL_Id)) INNER JOIN LNCEL_FDD AS LNCEL_FDD_1 ON (LNCEL_1.MRBTS_Id = LNCEL_FDD_1.MRBTS_Id) AND (LNCEL_1.LNBTS_Id = LNCEL_FDD_1.LNBTS_Id) AND (LNCEL_1.LNCEL_Id = LNCEL_FDD_1.LNCEL_Id)) INNER JOIN LNBTS ON (LNCEL.MRBTS_id = LNBTS.MRBTS_id) AND (LNCEL.LNBTS_id = LNBTS.LNBTS_id)) INNER JOIN LNBTS AS LNBTS_1 ON (LNCEL_1.MRBTS_id = LNBTS_1.MRBTS_id) AND (LNCEL_1.LNBTS_id = LNBTS_1.LNBTS_id)) INNER JOIN baseLine ON (LNBTS.Name = baseline.Sitio)) INNER JOIN baseline AS baseline_1 ON (LNBTS_1.Name = baseline_1.Sitio)
WHERE ((CASE WHEN (LNCEL_FDD.earfcnDL = LNCEL_FDD_1.earfcnDL) THEN 1 ELSE 0 END) = 1) AND ((CASE WHEN (LNCEL.Name = LNCEL_1.Name) THEN 1 ELSE 0 END) = 0 ) AND ((LNBTS.PLMN_Id = 'RC8') OR (LNBTS.PLMN_Id = 'RC7' AND (LNBTS.name LIKE 'CAD%' OR LNBTS.name LIKE 'MAN%' OR LNBTS.name LIKE 'RIS%' OR LNBTS.name LIKE 'PER%' OR LNBTS.name LIKE 'QUI%' OR LNBTS.name LIKE 'ARM%' OR LNBTS.name LIKE 'CHO%' OR LNBTS.name LIKE 'QUB%')));
--
--toma menor distancia de la llave
--
DROP TABLE IF EXISTS PCI_DistMin;
CREATE TABLE PCI_DistMin AS
SELECT
PCI_DistT.Key, Min(PCI_DistT.Distance) AS MinOfDistancia, LTE_Param.Cluster, LTE_Param.Encargado
FROM PCI_DistT LEFT JOIN LTE_Param ON (PCI_DistT.MRBTS_Id = LTE_Param.MRBTS_Id) AND (PCI_DistT.LNBTS_Id = LTE_Param.LNBTS_Id) AND (PCI_DistT.LNCEL_Id = LTE_Param.LNCEL_Id)
GROUP BY PCI_DistT.Key;
--
--
--Query final asociando parametros de vecino mas cercano
--
DROP TABLE IF EXISTS PCI_DistF;
CREATE TABLE PCI_DistF AS
SELECT
PCI_DistMin.Cluster, PCI_DistMin.Encargado, PCI_DistT.Key,PCI_DistT.LNCELSRC,PCI_DistT.LNCELTGT,PCI_DistT.phyCellId,PCI_DistT.Distance,PCI_DistT.SameSite,PCI_DistT.SameCarrier,PCI_DistT.MRBTS_id,PCI_DistT.LNBTS_id,PCI_DistT.LNCEL_id,PCI_DistT.KeySecS,PCI_DistT.MRBTSIdT,PCI_DistT.LNBTSIdT,PCI_DistT.LNCEL_IdT,PCI_DistT.KeySecT,PCI_DistT.EARFCN_SRC,PCI_DistT.EARFCN_TGT,PCI_DistT.LNBTSSrc,PCI_DistT.LNBTSTgt
FROM PCI_DistT INNER JOIN PCI_DistMin ON (PCI_DistT.Distance = PCI_DistMin.MinOfDistancia) AND (PCI_DistT.Key = PCI_DistMin.Key)
ORDER BY PCI_DistT.Distance;
--
--
--
--RSI audit. incluye coRSI y sus distancias
--
DROP TABLE IF EXISTS RSI_DistT;
CREATE TABLE RSI_DistT AS
SELECT
LNCEL.Name || LNCEL_FDD.rootSeqIndex AS Key, LNCEL.Name AS LNCELSRC, LNCEL_1.Name AS LNCELTGT, LNCEL_FDD.rootSeqIndex, CASE WHEN (LNBTS.Name = LNBTS_1.Name) THEN 1 ELSE 0 END AS SameSite, CASE WHEN (LNCEL_FDD.earfcnDL = LNCEL_FDD_1.earfcnDL) THEN 1 ELSE 0 END AS SameCarrier, LNCEL.MRBTS_Id, LNCEL.LNBTS_Id, LNCEL.LNCEL_Id, LNBTS.name||substr(LNCEL.name,-1,1) AS KeySecS, LNCEL_1.MRBTS_Id AS MRBTSIdT, LNCEL_1.LNBTS_Id AS LNBTSIdT, LNCEL_1.LNCEL_Id AS LNCEL_IdT, LNBTS_1.name||substr(LNCEL_1.name,-1,1) AS KeySecT, LNCEL_FDD.earfcnDL AS EARFCN_SRC, LNCEL_FDD_1.earfcnDL AS EARFCN_TGT, LNBTS.name AS LNBTSSrc, LNBTS_1.name AS LNBTSTgt,
ROUND (12756273.2 * ASIN(MIN (1 , SQRT(POWER( SIN(RADIANS(Baseline.Latitud - Baseline_1.Latitud)/2) , 2) + COS(RADIANS(Baseline.Latitud)) * COS(RADIANS(Baseline_1.Latitud)) * POWER ( SIN(RADIANS(Baseline.Longitud - Baseline_1.Longitud)/2) , 2)))) , 0) AS Distance
FROM ((((((LNCEL_FDD INNER JOIN LNCEL_FDD AS LNCEL_FDD_1 ON (LNCEL_FDD.rootSeqIndex = LNCEL_FDD_1.rootSeqIndex)) INNER JOIN LNCEL ON (LNCEL.MRBTS_Id = LNCEL_FDD.MRBTS_Id) AND (LNCEL.LNBTS_Id = LNCEL_FDD.LNBTS_Id) AND (LNCEL.LNCEL_Id = LNCEL_FDD.LNCEL_Id)) INNER JOIN LNCEL AS LNCEL_1 ON (LNCEL_1.MRBTS_Id = LNCEL_FDD_1.MRBTS_Id) AND (LNCEL_1.LNBTS_Id = LNCEL_FDD_1.LNBTS_Id) AND (LNCEL_1.LNCEL_Id = LNCEL_FDD_1.LNCEL_Id)) INNER JOIN LNBTS ON (LNCEL.MRBTS_id = LNBTS.MRBTS_id) AND (LNCEL.LNBTS_id = LNBTS.LNBTS_id)) INNER JOIN LNBTS AS LNBTS_1 ON (LNCEL_1.MRBTS_id = LNBTS_1.MRBTS_id) AND (LNCEL_1.LNBTS_id = LNBTS_1.LNBTS_id)) INNER JOIN baseLine ON (LNBTS.Name = baseline.Sitio)) INNER JOIN baseline AS baseline_1 ON (LNBTS_1.Name = baseline_1.Sitio)
WHERE ((CASE WHEN (LNCEL_FDD.earfcnDL = LNCEL_FDD_1.earfcnDL) THEN 1 ELSE 0 END) = 1) AND ((CASE WHEN (LNCEL.Name = LNCEL_1.Name) THEN 1 ELSE 0 END) = 0 ) AND ((LNBTS.PLMN_Id = 'RC8') OR (LNBTS.PLMN_Id = 'RC7' AND (LNBTS.name LIKE 'CAD%' OR LNBTS.name LIKE 'MAN%' OR LNBTS.name LIKE 'RIS%' OR LNBTS.name LIKE 'PER%' OR LNBTS.name LIKE 'QUI%' OR LNBTS.name LIKE 'ARM%' OR LNBTS.name LIKE 'CHO%' OR LNBTS.name LIKE 'QUB%')));
--
--toma menor distancia de la llave
--
DROP TABLE IF EXISTS RSI_DistMin;
CREATE TABLE RSI_DistMin AS
SELECT
RSI_DistT.Key, Min(RSI_DistT.Distance) AS MinOfDistancia, LTE_Param.Cluster, LTE_Param.Encargado
FROM RSI_DistT LEFT JOIN LTE_Param ON (RSI_DistT.MRBTS_Id = LTE_Param.MRBTS_Id) AND (RSI_DistT.LNBTS_Id = LTE_Param.LNBTS_Id) AND (RSI_DistT.LNCEL_Id = LTE_Param.LNCEL_Id)
GROUP BY RSI_DistT.Key;
--
--
--Query final asociando parametros de vecino mas cercano
--
DROP TABLE IF EXISTS RSI_DistF;
CREATE TABLE RSI_DistF AS
SELECT
RSI_DistMin.Cluster, RSI_DistMin.Encargado, RSI_DistT.Key,RSI_DistT.LNCELSRC,RSI_DistT.LNCELTGT,RSI_DistT.rootSeqIndex,RSI_DistT.Distance,RSI_DistT.SameSite,RSI_DistT.SameCarrier,RSI_DistT.MRBTS_id,RSI_DistT.LNBTS_id,RSI_DistT.LNCEL_id,RSI_DistT.KeySecS,RSI_DistT.MRBTSIdT,RSI_DistT.LNBTSIdT,RSI_DistT.LNCEL_IdT,RSI_DistT.KeySecT,RSI_DistT.EARFCN_SRC,RSI_DistT.EARFCN_TGT,RSI_DistT.LNBTSSrc,RSI_DistT.LNBTSTgt
FROM RSI_DistT INNER JOIN RSI_DistMin ON (RSI_DistT.Distance = RSI_DistMin.MinOfDistancia) AND (RSI_DistT.Key = RSI_DistMin.Key)
ORDER BY RSI_DistT.Distance;
--
--
-- LNREL 031 pairing
--
-- RSLTE031 PARAM
--FULL
--
DROP TABLE IF EXISTS T031_PAR;
CREATE TABLE T031_PAR AS
SELECT
RSLTE031."Source LNCEL name" AS LNCELS, LNCEL_1.Name AS LNCELT, Baseline.Market || '-' || Baseline."Localidad (CRC)" AS ClusterS, Baseline_1.Market || '-' || Baseline_1."Localidad (CRC)" AS ClusterT,LNCEL.MRBTS_Id,LNCEL.LNBTS_Id,LNCEL.LNCEL_Id, RSLTE031."Source MRBTS name",RSLTE031."Source LNBTS name",RSLTE031."Source LNBTS type",(RSLTE031.eci_id - (RSLTE031.eci_id % 256))/256 AS MRBTS_IdT,(RSLTE031.eci_id - (RSLTE031.eci_id % 256))/256 AS LNBTS_IdT,LNCEL_1.LNCEL_Id AS LNCEL_IdT, (RSLTE031.eci_id % 256) AS LcrIdT, LNBTS_1.Name AS LNBTST, RSLTE031."Target LNBTS type",1*RSLTE031.mcc_id AS MCC,1*RSLTE031.mnc_id AS MNC,1*RSLTE031.eci_id AS ECI,1*RSLTE031."IntraPrep SR" AS IntraPrepSR, 1*RSLTE031.IntraSR AS IntraSR, 1*RSLTE031.IntraAtt AS IntraATT, 1*RSLTE031."IntraCancel R" AS IntraCancelR, 1*RSLTE031."InterPrep SR" AS InterPrepSR, 1*RSLTE031.InterSR AS InterSR, 1*RSLTE031.InterAtt AS InterATT, 1*RSLTE031.InterFR AS InterFR, 1*RSLTE031.LBSR AS LBSR, 1*RSLTE031.LBAtt AS LBATT, 1*RSLTE031.LateHO AS LateHO, 1*RSLTE031."EarlyHOtype 1" AS EarlyHOtype1, 1*RSLTE031."EarlyHOtype 2" AS EarlyHOtype2, ROUND (12756273.2 * ASIN(MIN (1 , SQRT(POWER( SIN(RADIANS(Baseline.Latitud - Baseline_1.Latitud)/2) , 2) + COS(RADIANS(Baseline.Latitud)) * COS(RADIANS(Baseline_1.Latitud)) * POWER ( SIN(RADIANS(Baseline.Longitud - Baseline_1.Longitud)/2) , 2)))) , 0) AS Distance
FROM (((((RSLTE031 LEFT JOIN LNCEL ON (RSLTE031."Source LNCEL name" = LNCEL.Name)) LEFT JOIN LNCEL AS LNCEL_1 ON ((RSLTE031.eci_id - (RSLTE031.eci_id % 256))/256 = LNCEL_1.LNBTS_Id) AND ((RSLTE031.eci_id % 256) = LNCEL_1.LcrId)) LEFT JOIN LNBTS ON (RSLTE031."Source MRBTS name" = LNBTS.Name)) LEFT JOIN LNBTS AS LNBTS_1 ON (LNCEL_1.MRBTS_id = LNBTS_1.MRBTS_id) AND (LNCEL_1.LNBTS_id = LNBTS_1.LNBTS_id)) LEFT JOIN baseLine ON (RSLTE031."Source MRBTS name" = baseline.Sitio)) LEFT JOIN baseline AS baseline_1 ON (LNBTS_1.Name = baseline_1.Sitio)
WHERE (LNBTS.PLMN_Id = 'RC8') OR (LNBTS.PLMN_Id = 'RC7' AND (LNBTS.name LIKE 'CAD%' OR LNBTS.name LIKE 'MAN%' OR LNBTS.name LIKE 'RIS%' OR LNBTS.name LIKE 'PER%' OR LNBTS.name LIKE 'QUI%' OR LNBTS.name LIKE 'ARM%' OR LNBTS.name LIKE 'CHO%' OR LNBTS.name LIKE 'QUB%'));
--
--
--CRUZA CON LNREL
--
DROP TABLE IF EXISTS T031_PAR_LNREL;
CREATE TABLE T031_PAR_LNREL AS
SELECT
T031_PAR.LNCELS,T031_PAR.LNCELT,T031_PAR.ClusterS,T031_PAR.ClusterT,T031_PAR.MRBTS_id,T031_PAR.LNBTS_id,T031_PAR.LNCEL_id,T031_PAR."Source MRBTS name",T031_PAR."Source LNBTS name",T031_PAR."Source LNBTS type",T031_PAR.MRBTS_IdT,T031_PAR.LNBTS_IdT,T031_PAR.LNCEL_IdT,T031_PAR.LcrIdT,T031_PAR.LNBTST,T031_PAR."Target LNBTS type",T031_PAR.MCC,T031_PAR.MNC,T031_PAR.ECI,T031_PAR.IntraPrepSR,T031_PAR.IntraSR,T031_PAR.IntraATT,T031_PAR.IntraCancelR,T031_PAR.InterPrepSR,T031_PAR.InterSR,T031_PAR.InterATT,T031_PAR.InterFR,T031_PAR.LBSR,T031_PAR.LBATT,T031_PAR.LateHO,T031_PAR.EarlyHOtype1,T031_PAR.EarlyHOtype2,T031_PAR.Distance, LNREL_PAR.LNCELname,LNREL_PAR.LNCELnameT,LNREL_PAR.LNCELnameTB,LNREL_PAR.lcrId,LNREL_PAR.lcrIdT,LNREL_PAR.Cluster,LNREL_PAR.ClusterT,LNREL_PAR.PLMN_id,LNREL_PAR.PLMN_idT,LNREL_PAR.MRBTS_id,LNREL_PAR.LNBTS_id,LNREL_PAR.LNCEL_id,LNREL_PAR.LNREL_id,LNREL_PAR.moVersion,LNREL_PAR.mcc,LNREL_PAR.mnc,LNREL_PAR.amleAllowed,LNREL_PAR.cellIndOffNeigh,LNREL_PAR.cellIndOffNeighDelta,LNREL_PAR.handoverAllowed,LNREL_PAR.nrControl,LNREL_PAR.nrStatus,LNREL_PAR.removeAllowed,LNREL_PAR.SBTS_id,LNREL_PAR.name,LNREL_PAR.LNBTSname,LNREL_PAR.LNBTSnameT,LNREL_PAR.MRBTS_idT,LNREL_PAR.LNBTS_idT,LNREL_PAR.LNCEL_idT,LNREL_PAR.eutraCelId,LNREL_PAR.PowerBoost,LNREL_PAR.PCI,LNREL_PAR.RSI,LNREL_PAR.tac,LNREL_PAR.eutraCelIdT,LNREL_PAR.eutraCelIdTb,LNREL_PAR.PowerBoostT,LNREL_PAR.PCIT,LNREL_PAR.RSIT,LNREL_PAR.tacT,LNREL_PAR.Estado,LNREL_PAR.EstadoT,LNREL_PAR.VendorT,LNREL_PAR.Distance
FROM T031_PAR LEFT JOIN LNREL_PAR ON (T031_PAR.LNCELS=LNREL_PAR.LNCELname) AND (T031_PAR.LNBTS_IdT = LNREL_PAR.LNBTS_idT) AND (T031_PAR.LcrIdT = LNREL_PAR.lcrIdT)
WHERE (T031_PAR.Distance > 5000) AND (((T031_PAR.IntraATT > 1000) AND (T031_PAR.IntraSR < 98)) OR ((T031_PAR.InterATT > 1000) AND (T031_PAR.InterSR < 98)));       
--
-- FILTRO POR DIST, INT Y FALLA
--
--
